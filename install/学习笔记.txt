文档：https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/names/
命令式命令

	通过创建 Deployment 对象来运行 nginx 容器的实例：
	kubectl run nginx --image nginx

	使用不同的语法来达到同样的上面的效果：
	kubectl create deployment nginx --image nginx

	权衡
	与对象配置相比的优点：
	命令简单，易学且易于记忆。
	命令仅需一步即可对集群进行更改。

	与对象配置相比的缺点：
	命令不与变更审查流程集成。
	命令不提供与更改关联的审核跟踪。
	除了实时内容外，命令不提供记录源。
	命令不提供用于创建新对象的模板。


命令式对象配置
	创建在配置文件中定义的对象：
	kubectl create -f nginx.yaml

	删除在两个配置文件中定义的对象：
	kubectl delete -f nginx.yaml -f redis.yaml

	通过覆盖实时配置来更新配置文件中定义的对象：
	kubectl replace -f nginx.yaml

	权衡
	与命令式命令相比的优点：
	对象配置可以存储在源控制系统中，比如 Git。
	对象配置可以与流程集成，例如在推送和审计之前检查更新。
	对象配置提供了用于创建新对象的模板。

	与命令式命令相比的缺点：
	对象配置需要对对象架构有基本的了解。
	对象配置需要额外的写 YAML 文件的步骤。

	与声明式对象配置相比的优点：
	命令式对象配置行为更加简单易懂。
	从 Kubernetes 1.5 版本开始，命令式对象配置更加成熟。
	
	与声明式对象配置相比的缺点：
	命令式对象配置针对文件而不是目录上效果最佳。
	对活动对象的更新必须反映在配置文件中，否则将在下一次替换是丢失。

声明式对象配置
	处理 configs 目录中的所有对象配置文件，创建并更新活动对象。可以首先使用 diff 子命令查看将要进行的更改，然后在进行应用：
	kubectl diff -f configs/
	kubectl apply -f configs/

	递归处理目录：
	kubectl diff -R -f configs/
	kubectl apply -R -f configs/

	权衡
	与命令式对象配置相比的优点：
	即使未将对活动对象所做的更改未合并回到配置文件中，也将保留这些更改。
	声明性对象配置更好地支持对目录进行操作并自动检测每个对象的操作类型（创建，修补，删除）。

	与命令式对象配置相比的缺点：
	声明式对象配置难于调试并且出现异常时难以理解。
	使用差异的部分更新会创建复杂的合并和补丁操作。


Kubernetes REST API 中的所有对象都由名称和 UID 明确标识。
	名称
		客户端提供的字符串，引用资源 url 中的对象，如/api/v1/pods/some name。
		一次只能有一个给定类型的对象具有给定的名称。但是，如果删除对象，则可以创建同名的新对象。
		按照惯例，Kubernetes 资源的名称最大长度应为 253 个字符，由小写字母、数字、-和 . 组成，但某些资源有更具体的限制。
		例如，下面是一个配置文件，Pod 名为 nginx-demo，容器名为 nginx：

		apiVersion: v1
		kind: Pod
		metadata:
		  name: nginx-demo
		spec:
  		  containers:
  		  - name: nginx
    		    image: nginx:1.7.9
    		    ports:
    		      - containerPort: 80
	UIDs
		Kubernetes 系统生成的字符串，唯一标识对象。
		在 Kubernetes 集群的整个生命周期中创建的每个对象都有一个不同的 uid，它旨在区分类似实体的历史事件。





